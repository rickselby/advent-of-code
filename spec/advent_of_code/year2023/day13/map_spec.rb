# frozen_string_literal: true

describe AdventOfCode::Year2023::Day13::Map do
  describe "value" do
    subject { described_class.new(map).value }

    maps = []
    maps[0] = <<~DATA
      #.##..##.
      ..#.##.#.
      ##......#
      ##......#
      ..#.##.#.
      ..##..##.
      #.#.##.#.
    DATA

    maps[1] = <<~DATA
      #...##..#
      #....#..#
      ..##..###
      #####.##.
      #####.##.
      ..##..###
      #....#..#
    DATA

    maps[2] = <<~DATA
      #.##
      ..##
      ####
    DATA

    maps[3] = <<~DATA
      .##..##.#.#.#.#..
      ...##........####
      #.#.##.#.##.##...
      ........#.#######
      ###..###...####..
      #..##..#.##......
      ........##.#..#..
      #.#..#.####....##
      #..##..#.##.#..##
      #......#.#.###.##
      ...##...#.##..###
      ##.##.##..#......
      ..####..##.#.##..
      ..#..#....###.###
      ..####....###..##
      ###..###.###.....
      ........#####.#..
    DATA

    data = [
      [maps[0], 5],
      [maps[1], 400],
      [maps[2], 3],
      [maps[3], 16],
    ]

    data.each do |map, result|
      context "with map #{map}" do
        let(:map) { map.lines.map(&:strip) }

        it { is_expected.to eq result }
      end
    end
  end

  describe "smudged_value" do
    subject { described_class.new(map).smudged_value }

    maps = []
    maps[0] = <<~DATA
      #.##..##.
      ..#.##.#.
      ##......#
      ##......#
      ..#.##.#.
      ..##..##.
      #.#.##.#.
    DATA

    maps[1] = <<~DATA
      #...##..#
      #....#..#
      ..##..###
      #####.##.
      #####.##.
      ..##..###
      #....#..#
    DATA

    maps[2] = <<~DATA
      .#.#..#
      ....##.
      #..#..#
      ###....
      ..#####
      .##.##.
      .#..##.
      .#..##.
      .##.##.
      ..#####
      ###....
      #..#..#
      ....##.
      .#.#..#
      ####..#
      #.#.#..
      ....##.
    DATA

    maps[3] = <<~DATA
      .##..##.#.#.#.#..
      ...##........####
      #.####.#.##.##...
      ........#.#######
      ###..###...####..
      #..##..#.##......
      ........##.#..#..
      #.#..#.####....##
      #..##..#.##.#...#
      #......#.#.###.##
      ...##...#.##..###
      ##.##.##..#......
      ..####..##.#.##..
      ..#..#....###.###
      ..####....###..##
      ###..###.###.....
      ........#####.#..
    DATA

    data = [
      [maps[0], 300],
      [maps[1], 100],
      [maps[2], 5],
      [maps[3], 16],
    ]

    data.each do |map, result|
      context "with map #{map}" do
        let(:map) { map.lines.map(&:strip) }

        it { is_expected.to eq result }
      end
    end
  end
end
